{
  "openapi" : "3.0.1",
  "info" : {
    "title" : "Starburst Galaxy Public API",
    "description" : "# Access Tokens\n\nAccess tokens are obtained using the OAuth2 credentials flow and API authentication tokens.\n\n1. Create an API authentication token at `https://{account-domain}/%s`\n2. Use the API authentication token to obtain a temporary access token by POST to `https://{account-domain}/oauth/v2/token`. The request must have a Basic Authorization header with the client ID and secret Base64 encoded in the form `clientId:clientSecret`. The request body must be `grant_type=client_credentials`.\n\n`cURL` example:\n\n```\ncurl -X POST \\\n  -H 'Authorization: Basic {base64(clientId:clientSecret)}' \\\n  -H 'Content-Type: application/x-www-form-urlencoded' \\\n  -d 'grant_type=client_credentials' \\\n  https://{account-domain}/oauth/v2/token\n```\n\nThe access token returned can be used to make API calls with the header `Authorization: Bearer {access token}`.\n",
    "version" : "v1"
  },
  "security" : [ {
    "accessToken" : [ ]
  } ],
  "tags" : [ {
    "name" : "Cluster Service",
    "description" : "Cluster related operations"
  }, {
    "name" : "SchemaDiscovery Service",
    "description" : "Schema discovery related operations"
  }, {
    "name" : "Catalog Service",
    "description" : "Catalog related operations"
  } ],
  "paths" : {
    "/public/api/v1/cluster/{clusterId}:start" : {
      "post" : {
        "tags" : [ "Cluster Service" ],
        "description" : "Start or resume a cluster - DEPRECATED - You can start/enable a cluster by patching the cluster enabled field with a true value - New Implementation: public/api/v1/cluster/{clusterId}",
        "operationId" : "startCluster",
        "parameters" : [ {
          "in" : "path",
          "name" : "clusterId",
          "description" : "A Trino cluster",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "InvalidArgument",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthenticated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "204" : {
            "description" : "Success"
          },
          "403" : {
            "description" : "PermissionDenied",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404" : {
            "description" : "NotFound",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourceInfo"
                }
              }
            }
          }
        },
        "deprecated" : true
      }
    },
    "/public/api/v1/catalog" : {
      "get" : {
        "tags" : [ "Catalog Service" ],
        "description" : "List an account's catalog identifiers\n\n**BETA API:** This API is subject to incompatible changes, or even removal, in the future.",
        "operationId" : "listCatalog",
        "parameters" : [ {
          "in" : "query",
          "name" : "pageToken",
          "description" : "Pagination Token",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "in" : "query",
          "name" : "pageSize",
          "description" : "Page size or 0 for default (current maximum is 100)",
          "required" : false,
          "schema" : {
            "format" : "int32",
            "type" : "integer",
            "nullable" : false
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CatalogPaginated"
                }
              }
            }
          },
          "400" : {
            "description" : "InvalidArgument",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthenticated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403" : {
            "description" : "PermissionDenied",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        }
      }
    },
    "/public/api/v1/schemaDiscovery/{schemaDiscoveryId}" : {
      "get" : {
        "tags" : [ "SchemaDiscovery Service" ],
        "description" : "Get schema discovery by id\n\n**BETA API:** This API is subject to incompatible changes, or even removal, in the future.",
        "operationId" : "getSchemaDiscovery",
        "parameters" : [ {
          "in" : "path",
          "name" : "schemaDiscoveryId",
          "description" : "A schema discovery run",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SchemaDiscovery"
                }
              }
            }
          },
          "400" : {
            "description" : "InvalidArgument",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthenticated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403" : {
            "description" : "PermissionDenied",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404" : {
            "description" : "NotFound",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourceInfo"
                }
              }
            }
          }
        }
      }
    },
    "/public/api/v1/cluster/{clusterId}:stop" : {
      "post" : {
        "tags" : [ "Cluster Service" ],
        "description" : "Stop a cluster - DEPRECATED - You can stop/disable a cluster by patching the cluster enabled field with a false value - New Implementation: public/api/v1/cluster/{clusterId}",
        "operationId" : "stopCluster",
        "parameters" : [ {
          "in" : "path",
          "name" : "clusterId",
          "description" : "A Trino cluster",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "InvalidArgument",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthenticated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "204" : {
            "description" : "Success"
          },
          "403" : {
            "description" : "PermissionDenied",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404" : {
            "description" : "NotFound",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourceInfo"
                }
              }
            }
          }
        },
        "deprecated" : true
      }
    },
    "/public/api/v1/cluster/{clusterId}" : {
      "get" : {
        "tags" : [ "Cluster Service" ],
        "description" : "Get cluster by id\n\n**BETA API:** This API is subject to incompatible changes, or even removal, in the future.",
        "operationId" : "getCluster",
        "parameters" : [ {
          "in" : "path",
          "name" : "clusterId",
          "description" : "A Trino cluster",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Cluster"
                }
              }
            }
          },
          "400" : {
            "description" : "InvalidArgument",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthenticated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403" : {
            "description" : "PermissionDenied",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404" : {
            "description" : "NotFound",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourceInfo"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Cluster Service" ],
        "description" : "Delete a cluster\n\n**BETA API:** This API is subject to incompatible changes, or even removal, in the future.",
        "operationId" : "deleteCluster",
        "parameters" : [ {
          "in" : "path",
          "name" : "clusterId",
          "description" : "A Trino cluster",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "InvalidArgument",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthenticated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "204" : {
            "description" : "Success"
          },
          "403" : {
            "description" : "PermissionDenied",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404" : {
            "description" : "NotFound",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourceInfo"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Cluster Service" ],
        "description" : "Update a cluster\n\n**BETA API:** This API is subject to incompatible changes, or even removal, in the future.\n\nOnly include fields you wish to update. Missing or unrecognized fields are ignored.",
        "operationId" : "patchUpdateCluster",
        "parameters" : [ {
          "in" : "path",
          "name" : "clusterId",
          "description" : "A Trino cluster",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdateClusterConfigurationPatch"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Cluster"
                }
              }
            }
          },
          "400" : {
            "description" : "NoLongerAvailable",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourceInfo"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthenticated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403" : {
            "description" : "PermissionDenied",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404" : {
            "description" : "NotFound",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourceInfo"
                }
              }
            }
          },
          "409" : {
            "description" : "Aborted",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        }
      }
    },
    "/public/api/v1/schemaDiscovery/{schemaDiscoveryId}:apply" : {
      "post" : {
        "tags" : [ "SchemaDiscovery Service" ],
        "description" : "Execute SQL statements generated by schema discovery\n\n**BETA API:** This API is subject to incompatible changes, or even removal, in the future.",
        "operationId" : "applySchemaDiscovery",
        "parameters" : [ {
          "in" : "path",
          "name" : "schemaDiscoveryId",
          "description" : "A schema discovery run",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SchemaDiscovery"
                }
              }
            }
          },
          "400" : {
            "description" : "InvalidArgument",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthenticated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403" : {
            "description" : "PermissionDenied",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404" : {
            "description" : "NotFound",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourceInfo"
                }
              }
            }
          },
          "409" : {
            "description" : "Aborted",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        }
      }
    },
    "/public/api/v1/catalog/{catalogId}/schemaDiscovery" : {
      "get" : {
        "tags" : [ "SchemaDiscovery Service" ],
        "description" : "Get schema discoveries for catalog. When getting all runs, they won't contain same level of detail as when getting run by its ID.\n\n**BETA API:** This API is subject to incompatible changes, or even removal, in the future.",
        "operationId" : "listSchemaDiscoveryOfCatalog",
        "parameters" : [ {
          "in" : "path",
          "name" : "catalogId",
          "description" : "A catalog",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "in" : "query",
          "name" : "latest",
          "description" : "",
          "required" : false,
          "explode" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "boolean",
              "nullable" : false
            }
          }
        }, {
          "in" : "query",
          "name" : "pageToken",
          "description" : "Pagination Token",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "in" : "query",
          "name" : "pageSize",
          "description" : "Page size or 0 for default (current maximum is 100)",
          "required" : false,
          "schema" : {
            "format" : "int32",
            "type" : "integer",
            "nullable" : false
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SchemaDiscoveryPaginated"
                }
              }
            }
          },
          "400" : {
            "description" : "InvalidArgument",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthenticated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403" : {
            "description" : "PermissionDenied",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404" : {
            "description" : "NotFound",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourceInfo"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "SchemaDiscovery Service" ],
        "description" : "Run schema discovery under catalog, for specified uri\n\n**BETA API:** This API is subject to incompatible changes, or even removal, in the future.",
        "operationId" : "createSchemaDiscoveryOfCatalog",
        "parameters" : [ {
          "in" : "path",
          "name" : "catalogId",
          "description" : "A catalog",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RunSchemaDiscovery"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SchemaDiscovery"
                }
              }
            }
          },
          "400" : {
            "description" : "InvalidArgument",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthenticated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403" : {
            "description" : "PermissionDenied",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404" : {
            "description" : "NotFound",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourceInfo"
                }
              }
            }
          }
        }
      }
    },
    "/public/api/v1/cluster" : {
      "get" : {
        "tags" : [ "Cluster Service" ],
        "description" : "Return the clusters of your account\n\n**BETA API:** This API is subject to incompatible changes, or even removal, in the future.",
        "operationId" : "listCluster",
        "parameters" : [ {
          "in" : "query",
          "name" : "pageToken",
          "description" : "Pagination Token",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "in" : "query",
          "name" : "pageSize",
          "description" : "Page size or 0 for default (current maximum is 100)",
          "required" : false,
          "schema" : {
            "format" : "int32",
            "type" : "integer",
            "nullable" : false
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ClusterPaginated"
                }
              }
            }
          },
          "400" : {
            "description" : "InvalidArgument",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthenticated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403" : {
            "description" : "PermissionDenied",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Cluster Service" ],
        "description" : "Create a cluster\n\n**BETA API:** This API is subject to incompatible changes, or even removal, in the future.",
        "operationId" : "createCluster",
        "parameters" : [ ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateClusterConfiguration"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Cluster"
                }
              }
            }
          },
          "400" : {
            "description" : "FailedPrecondition",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PreconditionFailure"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthenticated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403" : {
            "description" : "PermissionDenied",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409" : {
            "description" : "Aborted",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        }
      }
    }
  },
  "components" : {
    "securitySchemes" : {
      "accessToken" : {
        "type" : "http",
        "name" : "Authorization",
        "in" : "header",
        "scheme" : "bearer",
        "bearerFormat" : "Access token"
      }
    },
    "schemas" : {
      "Violation" : {
        "required" : [ "description", "subject", "type" ],
        "properties" : {
          "type" : {
            "type" : "string",
            "description" : "Violation type",
            "enum" : [ "TermsOfService" ]
          },
          "subject" : {
            "type" : "string",
            "description" : "Violation subject"
          },
          "description" : {
            "type" : "string",
            "description" : "Violation description"
          }
        },
        "description" : "Field violations (read only)"
      },
      "CatalogPaginated" : {
        "properties" : {
          "nextPageToken" : {
            "type" : "string",
            "description" : "The next page token to use or \"\" if there are no more pages."
          },
          "result" : {
            "type" : "array",
            "description" : "A page of results.",
            "items" : {
              "$ref" : "#/components/schemas/Catalog"
            }
          }
        }
      },
      "BadRequest" : {
        "required" : [ "fieldViolations" ],
        "properties" : {
          "fieldViolations" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/FieldViolation"
            }
          }
        },
        "description" : "Invalid request (read only)"
      },
      "CreateClusterConfiguration" : {
        "required" : [ "catalogRefs", "cloudRegionId", "maxWorkers", "minWorkers", "name" ],
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "Name of the cluster being created"
          },
          "cloudRegionId" : {
            "type" : "string",
            "description" : "Cloud region ID of where the cluster will be created"
          },
          "catalogRefs" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "description" : "Catalog IDs to attach to the cluster"
            }
          },
          "idleStopMinutes" : {
            "format" : "int32",
            "type" : "integer",
            "description" : "Idle suspend duration (in minutes)",
            "nullable" : false
          },
          "processingMode" : {
            "type" : "string",
            "description" : "Cluster query processing mode",
            "enum" : [ "BATCH", "WARP_SPEED" ]
          },
          "minWorkers" : {
            "format" : "int32",
            "type" : "integer",
            "description" : "Minimum worker count",
            "nullable" : false
          },
          "maxWorkers" : {
            "format" : "int32",
            "type" : "integer",
            "description" : "Maximum worker count",
            "nullable" : false
          }
        },
        "description" : "Create a Trino cluster"
      },
      "ClusterPaginated" : {
        "properties" : {
          "nextPageToken" : {
            "type" : "string",
            "description" : "The next page token to use or \"\" if there are no more pages."
          },
          "result" : {
            "type" : "array",
            "description" : "A page of results.",
            "items" : {
              "$ref" : "#/components/schemas/Cluster"
            }
          }
        }
      },
      "ResourceInfo" : {
        "required" : [ "description", "resourceName" ],
        "properties" : {
          "resourceName" : {
            "type" : "string",
            "description" : "Name of the resource (read only)"
          },
          "description" : {
            "type" : "string",
            "description" : "Violation description (read only)"
          }
        },
        "description" : "Resource failure or inconsistency (read only)"
      },
      "RunSchemaDiscovery" : {
        "required" : [ "options", "skipApplying", "uri" ],
        "properties" : {
          "uri" : {
            "type" : "string",
            "description" : "Root uri, that schema discovery will start from. Current role must have location security correctly set up. (read only)"
          },
          "defaultSchemaName" : {
            "type" : "string",
            "description" : "Schema name that will be used for top-level tables, which aren't under any schema (read only)"
          },
          "options" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string",
              "description" : "Configuration options for schema discovery (read only)"
            }
          },
          "skipApplying" : {
            "type" : "boolean",
            "description" : "Do not apply schema discovery results to catalog, useful if tables needs to be inspected manually before running SQLs (read only)",
            "nullable" : false
          }
        },
        "description" : "Run schema discovery"
      },
      "ErrorInfo" : {
        "required" : [ "metadata", "reason" ],
        "properties" : {
          "reason" : {
            "type" : "string",
            "description" : "Error reason/detail (read only)"
          },
          "metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string",
              "description" : "Any additional details (read only)"
            }
          }
        },
        "description" : "Error (read only)"
      },
      "PreconditionFailure" : {
        "required" : [ "violations" ],
        "properties" : {
          "violations" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Violation"
            }
          }
        },
        "description" : "Required precondition was not met (read only)"
      },
      "FieldViolation" : {
        "required" : [ "description", "field" ],
        "properties" : {
          "field" : {
            "type" : "string",
            "description" : "Field name"
          },
          "description" : {
            "type" : "string",
            "description" : "Description of the violation"
          }
        },
        "description" : "Field violations (read only)"
      },
      "Catalog" : {
        "required" : [ "catalogId", "catalogName" ],
        "properties" : {
          "catalogId" : {
            "type" : "string",
            "description" : "Catalog ID (read only)"
          },
          "catalogName" : {
            "type" : "string",
            "description" : "Catalog name (read only)"
          }
        },
        "description" : "A catalog (read only)"
      },
      "SchemaDiscoveryPaginated" : {
        "properties" : {
          "nextPageToken" : {
            "type" : "string",
            "description" : "The next page token to use or \"\" if there are no more pages."
          },
          "result" : {
            "type" : "array",
            "description" : "A page of results.",
            "items" : {
              "$ref" : "#/components/schemas/SchemaDiscovery"
            }
          }
        }
      },
      "SchemaDiscovery" : {
        "required" : [ "catalogId", "createdAt", "createdTablesCount", "defaultSchemaName", "deletedTablesCount", "errors", "options", "schemaDiscoveryId", "sqlStatements", "status", "syncToken", "updatedTablesCount", "uri" ],
        "properties" : {
          "syncToken" : {
            "type" : "string",
            "description" : "Used to ensure consistency for resource updates. A syncToken that is returned\nfrom the server is valid until the resource is updated when a new syncToken will\nbe generated. Only the latest version of the object is maintained.\n (read only)"
          },
          "schemaDiscoveryId" : {
            "type" : "string",
            "description" : "Schema discovery ID (read only)"
          },
          "catalogId" : {
            "type" : "string",
            "description" : "Catalog ID (read only)"
          },
          "createdAt" : {
            "format" : "date-time",
            "type" : "string",
            "description" : "Time when schema discovery was created (read only)"
          },
          "startedAt" : {
            "format" : "date-time",
            "type" : "string",
            "description" : "Time when schema discovery has started (read only)"
          },
          "finishedAt" : {
            "format" : "date-time",
            "type" : "string",
            "description" : "Time when schema discovery has finished (read only)"
          },
          "uri" : {
            "type" : "string",
            "description" : "Root location for schema discovery (read only)"
          },
          "defaultSchemaName" : {
            "type" : "string",
            "description" : "Default schema name, used when tables without schemas were discovered (read only)"
          },
          "status" : {
            "type" : "string",
            "description" : "Status of schema discovery (read only)",
            "enum" : [ "Scheduled", "Running", "Errored", "Success", "RescanScheduled", "RescanRunning", "ApplyScheduled", "ApplyRunning", "ApplyErrored", "ApplySuccess", "Deprecated" ]
          },
          "basedOn" : {
            "type" : "string",
            "description" : "ID of schema discovery which this one is based on, in case of diff runs (read only)"
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "description" : "Errors that prevented schema discovery to finish (read only)"
            }
          },
          "options" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string",
              "description" : "Configuration options (read only)"
            }
          },
          "sqlStatements" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/DiscoveredSqlStatement"
            }
          },
          "createdTablesCount" : {
            "format" : "int32",
            "type" : "integer",
            "description" : "Number of tables to create (read only)",
            "nullable" : false
          },
          "updatedTablesCount" : {
            "format" : "int32",
            "type" : "integer",
            "description" : "Number of tables to update (read only)",
            "nullable" : false
          },
          "deletedTablesCount" : {
            "format" : "int32",
            "type" : "integer",
            "description" : "Number of tables to delete (read only)",
            "nullable" : false
          }
        },
        "description" : "A schema discovery run"
      },
      "DiscoveredSqlStatement" : {
        "required" : [ "sql", "status" ],
        "properties" : {
          "sql" : {
            "type" : "string",
            "description" : "Raw generated SQL (read only)"
          },
          "status" : {
            "type" : "string",
            "description" : "Status of the statement (read only)",
            "enum" : [ "Waiting", "Applying", "Success", "Errored", "Canceled" ]
          },
          "message" : {
            "type" : "string",
            "description" : "Message describing statement or error message in case of execution failure (read only)"
          }
        },
        "description" : "Generated SQL statements (read only)"
      },
      "Cluster" : {
        "required" : [ "batchCluster", "catalogRefs", "cloudRegionId", "clusterId", "maxWorkers", "minWorkers", "name", "syncToken", "warpSpeedCluster" ],
        "properties" : {
          "syncToken" : {
            "type" : "string",
            "description" : "Used to ensure consistency for resource updates. A syncToken that is returned\nfrom the server is valid until the resource is updated when a new syncToken will\nbe generated. Only the latest version of the object is maintained.\n (read only)"
          },
          "clusterId" : {
            "type" : "string",
            "description" : "Cluster ID (read only)"
          },
          "name" : {
            "type" : "string",
            "description" : "Cluster name (read only)"
          },
          "cloudRegionId" : {
            "type" : "string",
            "description" : "Cloud region ID (read only)"
          },
          "catalogRefs" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "description" : "Cluster attached catalog IDs (read only)"
            }
          },
          "idleStopMinutes" : {
            "format" : "int32",
            "type" : "integer",
            "description" : "Idle stop duration (in minutes) (read only)",
            "nullable" : false
          },
          "batchCluster" : {
            "type" : "boolean",
            "description" : "Supports resource intensive query processing mode (read only)",
            "nullable" : false
          },
          "warpSpeedCluster" : {
            "type" : "boolean",
            "description" : "Supports warp speed mode (read only)",
            "nullable" : false
          },
          "minWorkers" : {
            "format" : "int32",
            "type" : "integer",
            "description" : "Minimum worker count (read only)",
            "nullable" : false
          },
          "maxWorkers" : {
            "format" : "int32",
            "type" : "integer",
            "description" : "Maximum worker count (read only)",
            "nullable" : false
          },
          "clusterState" : {
            "type" : "string",
            "description" : "Cluster state (read only)"
          },
          "trinoUri" : {
            "type" : "string",
            "description" : "Connection URL (read only)"
          }
        },
        "description" : "A Trino cluster"
      },
      "UpdateClusterConfigurationPatch" : {
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "Name of the cluster being created"
          },
          "cloudRegionId" : {
            "type" : "string",
            "description" : "Cloud region ID of where the cluster will be created"
          },
          "catalogRefs" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "description" : "Catalog IDs to attach to the cluster"
            }
          },
          "idleStopMinutes" : {
            "format" : "int32",
            "type" : "integer",
            "description" : "Idle suspend duration (in minutes)",
            "nullable" : false
          },
          "processingMode" : {
            "type" : "string",
            "description" : "Cluster query processing mode",
            "enum" : [ "BATCH", "WARP_SPEED" ]
          },
          "minWorkers" : {
            "format" : "int32",
            "type" : "integer",
            "description" : "Minimum worker count",
            "nullable" : false
          },
          "maxWorkers" : {
            "format" : "int32",
            "type" : "integer",
            "description" : "Maximum worker count",
            "nullable" : false
          },
          "enabled" : {
            "type" : "boolean",
            "description" : "Enable/Disable a cluster",
            "nullable" : false
          }
        },
        "description" : "Update a Trino cluster"
      }
    }
  }
}
